import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

// Almacenar visitas en memoria (se reinicia cuando reinicies el server)
const visitTracker = new Map<string, { count: number, firstVisit: Date, lastVisit: Date }>()

export async function middleware(request: NextRequest) {
  const userAgent = request.headers.get('user-agent') || 'Unknown'
  const ip = request.headers.get('x-forwarded-for') ||
             request.headers.get('x-real-ip') ||
             'Unknown IP'
  const referrer = request.headers.get('referer') || request.headers.get('referrer') || 'Directo'
  const language = request.headers.get('accept-language')?.split(',')[0] || 'Unknown'

  // Parsear info del User-Agent
  const isMobile = /mobile|android|iphone|ipad|ipod/i.test(userAgent)
  const isTablet = /tablet|ipad/i.test(userAgent)
  const deviceType = isTablet ? 'üì± Tablet' : isMobile ? 'üì± Mobile' : 'üíª Desktop'

  // Detectar navegador CON VERSI√ìN
  let browser = 'üåê Unknown'
  let browserVersion = ''

  if (userAgent.includes('Edg/')) {
    const match = userAgent.match(/Edg\/([\d.]+)/)
    browserVersion = match ? match[1] : ''
    browser = `üåê Edge ${browserVersion}`
  } else if (userAgent.includes('Chrome/') && !userAgent.includes('Edg')) {
    const match = userAgent.match(/Chrome\/([\d.]+)/)
    browserVersion = match ? match[1] : ''
    browser = `üåê Chrome ${browserVersion}`
  } else if (userAgent.includes('Safari/') && !userAgent.includes('Chrome')) {
    const match = userAgent.match(/Version\/([\d.]+)/)
    browserVersion = match ? match[1] : ''
    browser = `üåê Safari ${browserVersion}`
  } else if (userAgent.includes('Firefox/')) {
    const match = userAgent.match(/Firefox\/([\d.]+)/)
    browserVersion = match ? match[1] : ''
    browser = `üåê Firefox ${browserVersion}`
  }

  // Detectar OS CON VERSI√ìN
  let os = 'üíæ Unknown OS'
  let osVersion = ''

  if (userAgent.includes('Windows NT')) {
    const match = userAgent.match(/Windows NT ([\d.]+)/)
    const version = match ? match[1] : ''
    const winVersions: { [key: string]: string } = {
      '10.0': '10/11',
      '6.3': '8.1',
      '6.2': '8',
      '6.1': '7'
    }
    os = `üíæ Windows ${winVersions[version] || version}`
  } else if (userAgent.includes('Mac OS X')) {
    const match = userAgent.match(/Mac OS X ([\d_]+)/)
    osVersion = match ? match[1].replace(/_/g, '.') : ''
    os = `üíæ macOS ${osVersion}`
  } else if (userAgent.includes('Android')) {
    const match = userAgent.match(/Android ([\d.]+)/)
    osVersion = match ? match[1] : ''
    os = `üíæ Android ${osVersion}`
  } else if (userAgent.includes('iPhone') || userAgent.includes('iPad')) {
    const match = userAgent.match(/OS ([\d_]+)/)
    osVersion = match ? match[1].replace(/_/g, '.') : ''
    os = `üíæ iOS ${osVersion}`
  } else if (userAgent.includes('Linux')) {
    os = 'üíæ Linux'
  }

  // Detectar MODELO DE DISPOSITIVO
  let deviceModel = ''

  // Samsung
  if (userAgent.includes('SM-')) {
    const match = userAgent.match(/SM-([A-Z0-9]+)/)
    deviceModel = match ? `üì± Samsung Galaxy ${match[1]}` : 'üì± Samsung'
  }
  // iPhone
  else if (userAgent.includes('iPhone')) {
    deviceModel = 'üì± iPhone'
  }
  // iPad
  else if (userAgent.includes('iPad')) {
    deviceModel = 'üì± iPad'
  }
  // Xiaomi
  else if (userAgent.includes('Mi ') || userAgent.includes('Redmi')) {
    const match = userAgent.match(/(Mi|Redmi) ([A-Z0-9 ]+)/)
    deviceModel = match ? `üì± Xiaomi ${match[0]}` : 'üì± Xiaomi'
  }
  // Motorola
  else if (userAgent.includes('moto')) {
    const match = userAgent.match(/moto ([a-z0-9 ]+)/i)
    deviceModel = match ? `üì± Motorola ${match[1]}` : 'üì± Motorola'
  }

  // Detectar desde d√≥nde viene (app social)
  let source = 'üåç Navegador directo'
  if (referrer.includes('facebook.com') || userAgent.includes('FBAN') || userAgent.includes('FBAV')) {
    source = 'üìò Facebook'
  } else if (referrer.includes('instagram.com') || userAgent.includes('Instagram')) {
    source = 'üì∏ Instagram'
  } else if (referrer.includes('whatsapp') || userAgent.includes('WhatsApp')) {
    source = 'üí¨ WhatsApp'
  } else if (referrer.includes('twitter.com') || referrer.includes('t.co')) {
    source = 'üê¶ Twitter/X'
  } else if (referrer.includes('linkedin.com')) {
    source = 'üíº LinkedIn'
  } else if (referrer.includes('google.com')) {
    source = 'üîç Google'
  } else if (referrer !== 'Directo') {
    source = `üîó ${new URL(referrer).hostname}`
  }

  // Rastrear visitas
  const visitorKey = `${ip}-${userAgent}`
  const now = new Date()
  let visitInfo = visitTracker.get(visitorKey)

  if (!visitInfo) {
    visitInfo = { count: 1, firstVisit: now, lastVisit: now }
    visitTracker.set(visitorKey, visitInfo)
  } else {
    visitInfo.count++
    visitInfo.lastVisit = now
  }

  const isNewVisitor = visitInfo.count === 1
  const timeSinceLastVisit = visitInfo.count > 1
    ? Math.floor((now.getTime() - visitInfo.lastVisit.getTime()) / 1000 / 60)
    : 0

  // Obtener geolocalizaci√≥n (solo para IPs p√∫blicas, no localhost)
  let geoInfo = {
    city: 'Unknown',
    region: 'Unknown',
    country: 'Unknown',
    isp: 'Unknown',
    org: 'Unknown',
    timezone: 'Unknown',
    connectionType: 'Unknown'
  }

  // Solo hacer la llamada si no es localhost/IPv6 local
  const publicIp = ip.split(',')[0].trim()
  const isPublicIP = !publicIp.includes('localhost') &&
                     !publicIp.includes('127.0.0.1') &&
                     !publicIp.includes('::1') &&
                     publicIp.length < 50 // IPv6 p√∫blicas son m√°s cortas

  if (isPublicIP) {
    try {
      const geoResponse = await fetch(`https://ipapi.co/${publicIp}/json/`, {
        signal: AbortSignal.timeout(2000) // timeout de 2 segundos
      })
      if (geoResponse.ok) {
        const geoData = await geoResponse.json()
        geoInfo = {
          city: geoData.city || 'Unknown',
          region: geoData.region || 'Unknown',
          country: geoData.country_name || 'Unknown',
          isp: geoData.org || 'Unknown',
          org: geoData.asn || 'Unknown',
          timezone: geoData.timezone || 'Unknown',
          connectionType: geoData.org?.toLowerCase().includes('fibertel') ||
                         geoData.org?.toLowerCase().includes('telecom')
            ? (geoData.org.toLowerCase().includes('fibertel') ? 'üè† WiFi Residencial (Fibertel)' : 'üì° Red M√≥vil (Telecom)')
            : 'üåê Red P√∫blica'
        }
      }
    } catch (error) {
      // Si falla la API, seguimos sin geo info
    }
  }

  // Log con formato ULTRA-MEJORADO
  console.log('\n' + '‚ñà'.repeat(80))
  console.log(`üî•üî•üî• ${isNewVisitor ? '¬°VISITANTE NUEVO!' : '¬°VISITANTE RECURRENTE!'} üî•üî•üî•`)
  console.log('‚ñà'.repeat(80))
  console.log(`\nüìä ESTAD√çSTICAS DE VISITA:`)
  console.log(`   ‚îî‚îÄ Visita n√∫mero: ${visitInfo.count}`)
  if (!isNewVisitor && timeSinceLastVisit > 0) {
    console.log(`   ‚îî‚îÄ √öltima visita hace: ${timeSinceLastVisit} minutos`)
  }
  console.log(`   ‚îî‚îÄ Primera visita: ${visitInfo.firstVisit.toLocaleString('es-AR')}`)

  console.log(`\nüåç INFORMACI√ìN DE UBICACI√ìN:`)
  console.log(`   ‚îî‚îÄ IP: ${publicIp}`)
  if (isPublicIP && geoInfo.city !== 'Unknown') {
    console.log(`   ‚îî‚îÄ Ubicaci√≥n: ${geoInfo.city}, ${geoInfo.region}, ${geoInfo.country}`)
    console.log(`   ‚îî‚îÄ ISP/Proveedor: ${geoInfo.isp}`)
    console.log(`   ‚îî‚îÄ ASN: ${geoInfo.org}`)
    console.log(`   ‚îî‚îÄ Timezone: ${geoInfo.timezone}`)
    console.log(`   ‚îî‚îÄ Tipo de conexi√≥n: ${geoInfo.connectionType}`)
  }

  console.log(`\nüíª INFORMACI√ìN DEL DISPOSITIVO:`)
  console.log(`   ‚îî‚îÄ Tipo: ${deviceType}`)
  if (deviceModel) console.log(`   ‚îî‚îÄ Modelo: ${deviceModel}`)
  console.log(`   ‚îî‚îÄ Navegador: ${browser}`)
  console.log(`   ‚îî‚îÄ Sistema: ${os}`)
  console.log(`   ‚îî‚îÄ Idioma: ${language}`)

  console.log(`\nüîó INFORMACI√ìN DE NAVEGACI√ìN:`)
  console.log(`   ‚îî‚îÄ Origen: ${source}`)
  console.log(`   ‚îî‚îÄ URL visitada: ${request.url}`)
  console.log(`   ‚îî‚îÄ Timestamp: ${new Date().toLocaleString('es-AR')}`)

  console.log(`\nüì± USER-AGENT T√âCNICO:`)
  console.log(`   ${userAgent}`)
  console.log('‚ñà'.repeat(80) + '\n')

  return NextResponse.next()
}

// Aplicar middleware a todas las rutas
export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     */
    '/((?!_next/static|_next/image|favicon.ico).*)',
  ],
}
